apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
}
android {
    signingConfigs {
        release {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
    }
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.huasport.smartsport"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 300
        versionName "3.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        // 默认是andr的渠道
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "anne"]
        multiDexEnabled = true
    }
    packagingOptions {
        exclude 'META-INF/RXJAVA.properties'
        exclude 'META-INF/DEPENDENCIES'
        pickFirst 'META-INF/*'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    dataBinding {
        enabled = true
    }
    sourceSets {
        main {
            jniLibs.srcDir 'libs'
            jni.srcDirs = []
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to checkforerrorsinrelease builds,
        // but continue the build even whenerrorsarefound:
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            minifyEnabled false
            shrinkResources false
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
}
configurations.all {
    //循环一个个的依赖库
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        //获取当前循环到的依赖库
        def requested = details.requested
        //如果这个依赖库群组的名字是com.android.support
        if (requested.group == 'com.android.support') {
            //且其名字不是以multidex开头的
            if (!requested.name.startsWith("multidex")) {
                //这里指定需要统一的依赖版本
                details.useVersion '25.1.0'
            }
        }
    }
}
//以下是为了找到android.os.SystemProperties这个隐藏的类
String SDK_DIR = System.getenv("ANDROID_SDK_HOME")
//("TAG", "SDK_DIR = " + SDK_DIR );
if (SDK_DIR == null) {
    Properties props = new Properties()
    props.load(new FileInputStream(project.rootProject.file("local.properties")))
    SDK_DIR = props.get('sdk.dir');
}
dependencies {
    compileOnly files("${SDK_DIR}/platforms/android-21/data/layoutlib.jar")
}
//以上是为了找到android.os.SystemProperties这个隐藏的类
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:recyclerview-v7:24.2.1'//RecyclerView

    implementation 'com.lzy.net:okgo:+'        //版本号使用 + 可以自动引用最新版

    implementation 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'//smartRefreshLayout

    implementation 'com.github.bumptech.glide:glide:3.7.0'//Glide

    implementation 'com.alibaba:fastjson:1.1.56.android'//Fastjson
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:+'
}